<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>netstandard2.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <LangVersion>latest</LangVersion>
    </PropertyGroup>
 
    <ItemGroup>
        <PackageReference Include="Newtonsoft.Json" Version="12.0.1" PrivateAssets="all" GeneratePathProperty="true" />
        <None Include="$(PKGNewtonsoft_Json)\lib\netstandard2.0\*.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
        <ProjectReference Include="..\Udup.Abstractions\Udup.Abstractions.csproj" PrivateAssets="all"/>
        <None Include="$(OutputPath)\*.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    </ItemGroup>

    <ItemGroup>
      <PackageReference Include="Microsoft.CodeAnalysis.Common" Version="4.9.2" />
      <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.9.2" />
    </ItemGroup>

    <PropertyGroup>
        <GetTargetPathDependsOn>$(GetTargetPathDependsOn);GetDependencyTargetPaths</GetTargetPathDependsOn>
    </PropertyGroup>

    <Target Name="GetDependencyTargetPaths">
        <ItemGroup>
            <!-- Newtonsoft.json will generate a path property because we did the GeneratePathProperty="true"-->
            <TargetPathWithTargetPlatformMoniker Include="$(PKGNewtonsoft_Json)\lib\netstandard2.0\*.dll" IncludeRuntimeDependency="false" />

            <!-- our local project will not generate path variable so we need to find it from it's own build output-->
            <!-- I used $(OutputPath) variable because the dependecy has the exact TFM and configuration as the generator 
                 you might need to add configuration manually -->
            <TargetPathWithTargetPlatformMoniker Include="..\Udup.Abstractions\$(OutputPath)\*.dll" IncludeRuntimeDependency="false" />
        </ItemGroup>
    </Target>
    
</Project>
